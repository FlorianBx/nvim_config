-- return {
-- 	"neovim/nvim-lspconfig",
-- 	event = { "BufReadPre", "BufNewFile" },
-- 	dependencies = {
-- 		"hrsh7th/cmp-nvim-lsp",
-- 		{ "antosha417/nvim-lsp-file-operations", config = true },
-- 		{ "folke/neodev.nvim", opts = {} },
-- 	},
-- 	config = function()
-- 		local lspconfig = require("lspconfig")
-- 		local mason_lspconfig = require("mason-lspconfig")
-- 		local cmp_nvim_lsp = require("cmp_nvim_lsp")
-- 		local keymap = vim.keymap
--
-- 		vim.diagnostic.config({
-- 			virtual_text = true,
-- 			signs = true,
-- 			underline = true,
-- 			update_in_insert = false,
-- 			severity_sort = true,
-- 		})
--
-- 		vim.o.updatetime = 100
--
-- 		vim.api.nvim_create_autocmd("LspAttach", {
-- 			group = vim.api.nvim_create_augroup("UserLspConfig", {}),
-- 			callback = function(ev)
-- 				local opts = { buffer = ev.buf, silent = true }
--
-- 				-- Keybinds
-- 				opts.desc = "Show LSP references"
-- 				keymap.set("n", "gr", vim.lsp.buf.references, opts)
--
-- 				opts.desc = "Show LSP declaration"
-- 				keymap.set("n", "gD", vim.lsp.buf.declaration, opts)
--
-- 				opts.desc = "Show LSP definition"
-- 				keymap.set("n", "gd", vim.lsp.buf.definition, opts)
--
-- 				opts.desc = "Show LSP implementation"
-- 				keymap.set("n", "gi", vim.lsp.buf.implementation, opts)
--
-- 				opts.desc = "Show LSP type definition"
-- 				keymap.set("n", "gt", vim.lsp.buf.type_definition, opts)
--
-- 				opts.desc = "Show LSP Diagnostic"
-- 				keymap.set("n", "ge", ":lua ToggleQuickfix()<CR>", opts)
-- 			end,
-- 		})
--
-- 		function ToggleQuickfix()
-- 			local qf_exists = false
-- 			for _, win in ipairs(vim.fn.getwininfo()) do
-- 				if win["quickfix"] == 1 then
-- 					qf_exists = true
-- 					break
-- 				end
-- 			end
-- 			if qf_exists then
-- 				vim.cmd("cclose")
-- 			else
-- 				vim.diagnostic.setqflist()
-- 				vim.cmd("copen")
-- 			end
-- 		end
--
-- 		-- Function for displaying LSP diagnostics in a floating window
-- 		function _G.show_diagnostics()
-- 			local opts = {
-- 				focusable = false,
-- 				close_events = { "BufLeave", "CursorMoved", "InsertEnter", "FocusLost" },
-- 				border = "rounded",
-- 				source = "always",
-- 				prefix = " ",
-- 			}
-- 			vim.diagnostic.open_float(nil, opts)
-- 		end
--
-- 		-- Associate diagnostics to CursorHold
-- 		vim.cmd([[
--       augroup ShowDiagnostics
--         autocmd!
--         autocmd CursorHold * lua _G.show_diagnostics()
--       augroup END
--     ]])
--
-- 		-- Desactivate virtual text
-- 		vim.diagnostic.config({
-- 			virtual_text = false,
-- 		})
--
-- 		-- LSP handlers
-- 		vim.lsp.handlers["textDocument/hover"] = vim.lsp.with(vim.lsp.handlers.hover, {
-- 			border = "rounded",
-- 		})
--
-- 		vim.lsp.handlers["textDocument/signatureHelp"] = vim.lsp.with(vim.lsp.handlers.signature_help, {
-- 			border = "rounded",
-- 		})
--
-- 		-- Add additional capabilities supported by nvim-cmp
-- 		local capabilities = cmp_nvim_lsp.default_capabilities()
--
-- 		local signs = { Error = " ", Warn = " ", Hint = " ", Info = " " }
-- 		for type, icon in pairs(signs) do
-- 			local hl = "DiagnosticSign" .. type
-- 			vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = "" })
-- 		end
--
-- 		mason_lspconfig.setup({
-- 			ensure_installed = { "ts_ls", "emmet_ls", "volar", "eslint" },
-- 		})
--
-- 		mason_lspconfig.setup_handlers({
-- 			function(server_name)
-- 				lspconfig[server_name].setup({
-- 					capabilities = capabilities,
-- 				})
-- 			end,
-- 			["volar"] = function()
-- 				local util = require("lspconfig.util")
-- 				local function get_typescript_server_path(root_dir)
-- 					local global_ts = "/usr/local/lib/node_modules/typescript/lib"
-- 					-- Alternative location if TypeScript is installed globally with yarn
-- 					-- local global_ts = os.getenv('HOME') .. '/.config/yarn/global/node_modules/typescript/lib'
-- 					local found_ts = ""
-- 					local function check_dir(path)
-- 						found_ts = util.path.join(path, "node_modules", "typescript", "lib")
-- 						if util.path.exists(found_ts) then
-- 							return found_ts
-- 						end
-- 					end
-- 					if util.path.exists(global_ts) then
-- 						return global_ts
-- 					else
-- 						if root_dir then
-- 							-- Check for TypeScript installation in node_modules
-- 							found_ts = check_dir(root_dir)
-- 							if found_ts then
-- 								return found_ts
-- 							end
-- 						end
-- 					end
-- 					return ""
-- 				end
--
-- 				require("lspconfig").volar.setup({
-- 					capabilities = capabilities,
-- 					filetypes = { "typescript", "javascript", "javascriptreact", "typescriptreact", "vue", "json" },
-- 					root_dir = util.root_pattern("package.json", "vue.config.js", "vite.config.ts", "nuxt.config.ts"),
-- 					on_new_config = function(new_config, new_root_dir)
-- 						new_config.init_options.typescript.tsdk = get_typescript_server_path(new_root_dir)
-- 					end,
-- 					init_options = {
-- 						typescript = {
-- 							tsdk = "",
-- 						},
-- 						languageFeatures = {
-- 							implementation = true,
-- 							references = true,
-- 							definition = true,
-- 							typeDefinition = true,
-- 							callHierarchy = true,
-- 							hover = true,
-- 							rename = true,
-- 							renameFileRefactoring = true,
-- 							signatureHelp = true,
-- 							codeAction = true,
-- 							workspaceSymbol = true,
-- 							completion = {
-- 								defaultTagNameCase = "both",
-- 								defaultAttrNameCase = "kebabCase",
-- 								getDocumentNameCasesRequest = false,
-- 								getDocumentSelectionRequest = false,
-- 							},
-- 							schemaRequestService = true,
-- 							documentHighlight = true,
-- 							documentLink = true,
-- 							codeLens = { showReferencesNotification = true },
-- 							semanticTokens = true,
-- 							diagnostics = true,
-- 						},
-- 						documentFeatures = {
-- 							selectionRange = true,
-- 							foldingRange = true,
-- 							linkedEditingRange = true,
-- 							documentSymbol = true,
-- 							documentColor = true,
-- 							documentFormatting = {
-- 								defaultPrintWidth = 100,
-- 							},
-- 						},
-- 					},
-- 				})
-- 			end,
-- 			["ts_ls"] = function()
-- 				local ts_ls = require("lspconfig").ts_ls
-- 				ts_ls.setup({
-- 					capabilities = capabilities,
-- 				})
-- 			end,
-- 			["emmet_ls"] = function()
-- 				local emmet_ls = require("lspconfig").emmet_ls
-- 				emmet_ls.setup({
-- 					capabilities = capabilities,
-- 					filetypes = {
-- 						"html",
-- 						"css",
-- 						"scss",
-- 						"javascript",
-- 						"typescriptreact",
-- 						"javascriptreact",
-- 						"vue",
-- 						"angular",
-- 						"svelte",
-- 					},
-- 					init_options = {},
-- 				})
-- 			end,
-- 			["eslint"] = function()
-- 				lspconfig.eslint.setup({
-- 					capabilities = capabilities,
-- 					on_attach = function(_, bufnr)
-- 						print("ESLint attached to buffer", bufnr)
-- 						vim.api.nvim_create_autocmd("BufWritePre", {
-- 							buffer = bufnr,
-- 							callback = function()
-- 								vim.lsp.buf.format({ async = false })
-- 								vim.cmd("EslintFixAll")
-- 							end,
-- 						})
-- 					end,
-- 					settings = {
-- 						workingDirectory = { mode = "auto" },
-- 						format = true,
-- 						quiet = false,
-- 						onIgnoredFiles = "warn",
-- 						run = "onType",
-- 					},
-- 					root_dir = lspconfig.util.root_pattern(
-- 						".eslintrc",
-- 						".eslintrc.js",
-- 						".eslintrc.cjs",
-- 						".eslintrc.yaml",
-- 						".eslintrc.yml",
-- 						".eslintrc.json",
-- 						"eslint.config.js",
-- 						"eslint.config.ts",
-- 						"package.json"
-- 					),
-- 					cmd = { "eslint", "--stdin" },
-- 				})
-- 			end,
-- 		})
-- 	end,
-- }
